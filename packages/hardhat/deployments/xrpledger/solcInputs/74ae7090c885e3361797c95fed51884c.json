{
  "language": "Solidity",
  "sources": {
    "@axelar-network/axelar-gmp-sdk-solidity/contracts/executable/AxelarExecutable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IAxelarGateway } from '../interfaces/IAxelarGateway.sol';\nimport { IAxelarExecutable } from '../interfaces/IAxelarExecutable.sol';\n\ncontract AxelarExecutable is IAxelarExecutable {\n    IAxelarGateway public immutable gateway;\n\n    constructor(address gateway_) {\n        if (gateway_ == address(0)) revert InvalidAddress();\n\n        gateway = IAxelarGateway(gateway_);\n    }\n\n    function execute(\n        bytes32 commandId,\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        bytes calldata payload\n    ) external {\n        bytes32 payloadHash = keccak256(payload);\n\n        if (!gateway.validateContractCall(commandId, sourceChain, sourceAddress, payloadHash))\n            revert NotApprovedByGateway();\n\n        _execute(sourceChain, sourceAddress, payload);\n    }\n\n    function executeWithToken(\n        bytes32 commandId,\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        bytes calldata payload,\n        string calldata tokenSymbol,\n        uint256 amount\n    ) external {\n        bytes32 payloadHash = keccak256(payload);\n\n        if (\n            !gateway.validateContractCallAndMint(\n                commandId,\n                sourceChain,\n                sourceAddress,\n                payloadHash,\n                tokenSymbol,\n                amount\n            )\n        ) revert NotApprovedByGateway();\n\n        _executeWithToken(sourceChain, sourceAddress, payload, tokenSymbol, amount);\n    }\n\n    function _execute(\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        bytes calldata payload\n    ) internal virtual {}\n\n    function _executeWithToken(\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        bytes calldata payload,\n        string calldata tokenSymbol,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarExecutable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IAxelarGateway } from './IAxelarGateway.sol';\n\ninterface IAxelarExecutable {\n    error InvalidAddress();\n    error NotApprovedByGateway();\n\n    function gateway() external view returns (IAxelarGateway);\n\n    function execute(\n        bytes32 commandId,\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        bytes calldata payload\n    ) external;\n\n    function executeWithToken(\n        bytes32 commandId,\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        bytes calldata payload,\n        string calldata tokenSymbol,\n        uint256 amount\n    ) external;\n}\n"
    },
    "@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IGovernable } from './IGovernable.sol';\nimport { IImplementation } from './IImplementation.sol';\n\ninterface IAxelarGateway is IImplementation, IGovernable {\n    /**********\\\n    |* Errors *|\n    \\**********/\n\n    error NotSelf();\n    error InvalidCodeHash();\n    error SetupFailed();\n    error InvalidAuthModule();\n    error InvalidTokenDeployer();\n    error InvalidAmount();\n    error InvalidChainId();\n    error InvalidCommands();\n    error TokenDoesNotExist(string symbol);\n    error TokenAlreadyExists(string symbol);\n    error TokenDeployFailed(string symbol);\n    error TokenContractDoesNotExist(address token);\n    error BurnFailed(string symbol);\n    error MintFailed(string symbol);\n    error InvalidSetMintLimitsParams();\n    error ExceedMintLimit(string symbol);\n\n    /**********\\\n    |* Events *|\n    \\**********/\n\n    event TokenSent(\n        address indexed sender,\n        string destinationChain,\n        string destinationAddress,\n        string symbol,\n        uint256 amount\n    );\n\n    event ContractCall(\n        address indexed sender,\n        string destinationChain,\n        string destinationContractAddress,\n        bytes32 indexed payloadHash,\n        bytes payload\n    );\n\n    event ContractCallWithToken(\n        address indexed sender,\n        string destinationChain,\n        string destinationContractAddress,\n        bytes32 indexed payloadHash,\n        bytes payload,\n        string symbol,\n        uint256 amount\n    );\n\n    event Executed(bytes32 indexed commandId);\n\n    event TokenDeployed(string symbol, address tokenAddresses);\n\n    event ContractCallApproved(\n        bytes32 indexed commandId,\n        string sourceChain,\n        string sourceAddress,\n        address indexed contractAddress,\n        bytes32 indexed payloadHash,\n        bytes32 sourceTxHash,\n        uint256 sourceEventIndex\n    );\n\n    event ContractCallApprovedWithMint(\n        bytes32 indexed commandId,\n        string sourceChain,\n        string sourceAddress,\n        address indexed contractAddress,\n        bytes32 indexed payloadHash,\n        string symbol,\n        uint256 amount,\n        bytes32 sourceTxHash,\n        uint256 sourceEventIndex\n    );\n\n    event ContractCallExecuted(bytes32 indexed commandId);\n\n    event TokenMintLimitUpdated(string symbol, uint256 limit);\n\n    event OperatorshipTransferred(bytes newOperatorsData);\n\n    event Upgraded(address indexed implementation);\n\n    /********************\\\n    |* Public Functions *|\n    \\********************/\n\n    function sendToken(\n        string calldata destinationChain,\n        string calldata destinationAddress,\n        string calldata symbol,\n        uint256 amount\n    ) external;\n\n    function callContract(\n        string calldata destinationChain,\n        string calldata contractAddress,\n        bytes calldata payload\n    ) external;\n\n    function callContractWithToken(\n        string calldata destinationChain,\n        string calldata contractAddress,\n        bytes calldata payload,\n        string calldata symbol,\n        uint256 amount\n    ) external;\n\n    function isContractCallApproved(\n        bytes32 commandId,\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        address contractAddress,\n        bytes32 payloadHash\n    ) external view returns (bool);\n\n    function isContractCallAndMintApproved(\n        bytes32 commandId,\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        address contractAddress,\n        bytes32 payloadHash,\n        string calldata symbol,\n        uint256 amount\n    ) external view returns (bool);\n\n    function validateContractCall(\n        bytes32 commandId,\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        bytes32 payloadHash\n    ) external returns (bool);\n\n    function validateContractCallAndMint(\n        bytes32 commandId,\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        bytes32 payloadHash,\n        string calldata symbol,\n        uint256 amount\n    ) external returns (bool);\n\n    /***********\\\n    |* Getters *|\n    \\***********/\n\n    function authModule() external view returns (address);\n\n    function tokenDeployer() external view returns (address);\n\n    function tokenMintLimit(string memory symbol) external view returns (uint256);\n\n    function tokenMintAmount(string memory symbol) external view returns (uint256);\n\n    function allTokensFrozen() external view returns (bool);\n\n    function implementation() external view returns (address);\n\n    function tokenAddresses(string memory symbol) external view returns (address);\n\n    function tokenFrozen(string memory symbol) external view returns (bool);\n\n    function isCommandExecuted(bytes32 commandId) external view returns (bool);\n\n    /************************\\\n    |* Governance Functions *|\n    \\************************/\n\n    function setTokenMintLimits(string[] calldata symbols, uint256[] calldata limits) external;\n\n    function upgrade(\n        address newImplementation,\n        bytes32 newImplementationCodeHash,\n        bytes calldata setupParams\n    ) external;\n\n    /**********************\\\n    |* External Functions *|\n    \\**********************/\n\n    function execute(bytes calldata input) external;\n}\n"
    },
    "@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IContractIdentifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// General interface for upgradable contracts\ninterface IContractIdentifier {\n    /**\n     * @notice Returns the contract ID. It can be used as a check during upgrades.\n     * @dev Meant to be overridden in derived contracts.\n     * @return bytes32 The contract ID\n     */\n    function contractId() external pure returns (bytes32);\n}\n"
    },
    "@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IGovernable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title IGovernable Interface\n * @notice This is an interface used by the AxelarGateway contract to manage governance and mint limiter roles.\n */\ninterface IGovernable {\n    error NotGovernance();\n    error NotMintLimiter();\n    error InvalidGovernance();\n    error InvalidMintLimiter();\n\n    event GovernanceTransferred(address indexed previousGovernance, address indexed newGovernance);\n    event MintLimiterTransferred(address indexed previousGovernance, address indexed newGovernance);\n\n    /**\n     * @notice Returns the governance address.\n     * @return address of the governance\n     */\n    function governance() external view returns (address);\n\n    /**\n     * @notice Returns the mint limiter address.\n     * @return address of the mint limiter\n     */\n    function mintLimiter() external view returns (address);\n\n    /**\n     * @notice Transfer the governance role to another address.\n     * @param newGovernance The new governance address\n     */\n    function transferGovernance(address newGovernance) external;\n\n    /**\n     * @notice Transfer the mint limiter role to another address.\n     * @param newGovernance The new mint limiter address\n     */\n    function transferMintLimiter(address newGovernance) external;\n}\n"
    },
    "@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IImplementation.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IContractIdentifier } from './IContractIdentifier.sol';\n\ninterface IImplementation is IContractIdentifier {\n    error NotProxy();\n\n    function setup(bytes calldata data) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/ILiquidityManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ILiquidityManager {\n    function getTotalLiquidityForToken(address token) external view returns (uint128 totalLiquidity);\n}"
    },
    "contracts/IndexAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {ILiquidityManager} from \"./ILiquidityManager.sol\";\nimport {IAxelarGateway} from \"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol\";\nimport { AxelarExecutable } from \"@axelar-network/axelar-gmp-sdk-solidity/contracts/executable/AxelarExecutable.sol\";\n\n\nuint32 constant CALLBACK_GAS_LIMIT = 4_000_000;\n\nstruct TokenInfo {\n    string _symbol;\n    address _address;\n    uint32 _chainId;\n    address _aggregator;\n    string[] _tags;\n}\n\nstruct LiquidityMessage {\n    address token;\n    string tokenDemonination;\n    uint256 liquidity;\n    uint32 chainId;\n    uint256 timestamp;\n} \n\nstruct SupplyMessage {\n    address token;\n    uint256 supply;\n    uint32 chainId;\n    uint256 timestamp;\n}\n\nstruct AggregatorParams {\n    uint256 _timeWindow; \n    uint256 _sampleSize;\n    // uint32 _chainId;\n    uint256 _bribeUnit;\n}\n\nstruct IndexUpdateMessage {\n    LiquidityMessage[] liquidityMessages;\n    SupplyMessage[] supplyMessages;\n}\n\nenum PayFeesIn {\n    Native,\n    LINK\n}\n\nerror NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees);\n\n\ncontract IndexAggregator is AxelarExecutable {\n\tIAxelarGateway axelarGateway;\n\tTokenInfo[] public tokenInfo;\n\tTokenInfo[] tmpTokens;\n\tILiquidityManager public liquidityManager;\n\tmapping(string => uint256) public tokens;\n\tstring[] public tokenSymbols;\n\n\tSupplyMessage[] public supplyMessages;\n\tLiquidityMessage[] public liquidityMessages;\n\t// TaggingVerifier public taggingVerifier;\n\n\tuint256[] public totalSupplies;\n\tuint256[] public liquidities;\n\tuint256[] public tokenParamsTimestampUpdates;\n\n\tmapping(uint256 => uint256[]) public movingAverage;\n\tuint256 sampleSize;\n\tuint256 timeWindow;\n\tuint256 samplingFrequency;\n\tuint256 lastSampleTime;\n\tuint256[] public lastIndexOrder;\n\tmapping(string => uint256[]) public tagsIndexOrder;\n\tmapping(string => uint256) public tagsIndexTimestamp;\n\tuint256 public lastIndexTimestamp;\n\tuint256 public bribeUnit;\n\tuint32 public chainId;\n\tuint32 public mainChainId;\n\n\tmapping(uint64 => address) public chainSelectorIdToSidechainAddress;\n\n\tconstructor(\n\t\tTokenInfo[] memory _tokenInfo,\n\t\taddress _liquidityManager,\n\t\taddress _axelarGateway,\n\t\tAggregatorParams memory _aggregatorParams\n\t) \n    AxelarExecutable(_axelarGateway)\n    {\n\t\tsampleSize = _aggregatorParams._sampleSize;\n\t\ttimeWindow = _aggregatorParams._timeWindow;\n\t\tsamplingFrequency = timeWindow / sampleSize;\n\t\tbribeUnit = _aggregatorParams._bribeUnit;\n\t\taxelarGateway = IAxelarGateway(_axelarGateway);\n\t\tliquidityManager = ILiquidityManager(_liquidityManager);\n\t\tfor (uint256 i = 0; i < _tokenInfo.length; i++) {\n\t\t\ttokenInfo.push(_tokenInfo[i]);\n\t\t\ttokenSymbols.push(_tokenInfo[i]._symbol);\n\t\t\ttokens[_tokenInfo[i]._symbol] = i;\n\t\t\ttotalSupplies.push(IERC20(_tokenInfo[i]._address).totalSupply());\n\t\t}\n\t}\n\n\t// Initialize methods\n\n\t// function setTaggingVerifier(address _taggingVerifier) external {\n\t//     taggingVerifier = TaggingVerifier(_taggingVerifier);\n\t// }\n\n\tfunction setChainId(uint32 _chainId, uint32 _mainChainId) external {\n\t\tchainId = _chainId;\n\t\tmainChainId = _mainChainId;\n\t}\n\n\tfunction isMainChain() public view returns (bool) {\n\t\treturn chainId == mainChainId;\n\t}\n\n\tfunction setSideChainAddress(\n\t\tuint64 chainSelectorId,\n\t\taddress sideChainAddress\n\t) external {\n\t\tchainSelectorIdToSidechainAddress[chainSelectorId] = sideChainAddress;\n\t}\n\n\tfunction updateTokenParams(\n\t\tuint256[] memory _totalSupplies,\n\t\tuint256[] memory _liquidities\n\t) external {\n\t\tfor (uint256 i = 0; i < tokenInfo.length; i++) {\n\t\t\tif (tokenInfo[i]._chainId == chainId) {\n\t\t\t\tliquidities[i] = liquidityManager.getTotalLiquidityForToken(\n\t\t\t\t\ttokenInfo[i]._address\n\t\t\t\t);\n\t\t\t\ttotalSupplies[i] = IERC20(tokenInfo[i]._address).totalSupply();\n\t\t\t\ttokenParamsTimestampUpdates[i] = block.timestamp;\n\t\t\t}\n\t\t}\n\n\t\tif (isMainChain()) {\n\t\t\tfor (uint256 i = 0; i < totalSupplies.length; i++) {\n\t\t\t\tfor (uint256 j = 0; j < tokenInfo.length; j++) {\n\t\t\t\t\tif (tokenInfo[j]._address == supplyMessages[i].token) {\n\t\t\t\t\t\ttotalSupplies[j] = supplyMessages[i].supply;\n\t\t\t\t\t\ttokenParamsTimestampUpdates[j] = liquidityMessages[i]\n\t\t\t\t\t\t\t.timestamp;\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (uint256 i = 0; i < liquidities.length; i++) {\n\t\t\t\tfor (uint256 j = 0; j < tokenInfo.length; j++) {\n\t\t\t\t\tif (tokenInfo[j]._address == liquidityMessages[i].token) {\n\t\t\t\t\t\tliquidities[j] = liquidityMessages[i].liquidity;\n\t\t\t\t\t\ttokenParamsTimestampUpdates[j] = liquidityMessages[i]\n\t\t\t\t\t\t\t.timestamp;\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!isMainChain()) {\n\t\t\tSupplyMessage[] memory _supplyMessages = new SupplyMessage[](\n\t\t\t\ttokenInfo.length\n\t\t\t);\n\t\t\tLiquidityMessage[]\n\t\t\t\tmemory _liquidityMessages = new LiquidityMessage[](\n\t\t\t\t\ttokenInfo.length\n\t\t\t\t);\n\t\t\tfor (uint256 i = 0; i < tokenInfo.length; i++) {\n\t\t\t\tif (chainId == tokenInfo[i]._chainId) {\n\t\t\t\t\t_supplyMessages[i] = SupplyMessage(\n\t\t\t\t\t\ttokenInfo[i]._address,\n\t\t\t\t\t\t_totalSupplies[i],\n\t\t\t\t\t\tchainId,\n\t\t\t\t\t\tblock.timestamp\n\t\t\t\t\t);\n\t\t\t\t\t_liquidityMessages[i] = LiquidityMessage(\n\t\t\t\t\t\ttokenInfo[i]._address,\n                        tokenInfo[i]._symbol,\n\t\t\t\t\t\t_liquidities[i],\n\t\t\t\t\t\tchainId,\n\t\t\t\t\t\tblock.timestamp\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction checkTokenParams() public {\n\t\tfor (uint256 i = 0; i < tokenInfo.length; i++) {\n\t\t\tif (\n\t\t\t\tblock.timestamp - tokenParamsTimestampUpdates[i] >= timeWindow\n\t\t\t) {\n\t\t\t\tliquidities[i] = liquidityManager.getTotalLiquidityForToken(\n\t\t\t\t\ttokenInfo[i]._address\n\t\t\t\t);\n\t\t\t\ttotalSupplies[i] = IERC20(tokenInfo[i]._address).totalSupply();\n\t\t\t\ttokenParamsTimestampUpdates[i] = block.timestamp;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction receiveFromAxelar(\n\t\tIndexUpdateMessage memory indexMessage\n\t) external {\n\t\t// add @axelar-network/axelar-cgp-solidity logic here\n\n\t\tfor (uint256 i = 0; i < indexMessage.liquidityMessages.length; i++) {\n\t\t\tLiquidityMessage memory liquidityMessage = indexMessage\n\t\t\t\t.liquidityMessages[i];\n\t\t\tliquidityMessages.push(liquidityMessage);\n\t\t}\n\t\tfor (uint256 i = 0; i < indexMessage.supplyMessages.length; i++) {\n\t\t\tSupplyMessage memory supplyMessage = indexMessage.supplyMessages[i];\n\t\t\tsupplyMessages.push(supplyMessage);\n\t\t}\n\t}\n\n\tfunction collectPriceFeeds() external {\n\t\trequire(\n\t\t\tblock.timestamp - lastSampleTime >= samplingFrequency,\n\t\t\t\"IndexAggregator: Sampling frequency not reached\"\n\t\t);\n\n\t\tif (block.timestamp - lastSampleTime >= timeWindow) {\n\t\t\tfor (uint256 i = 0; i < tokenInfo.length; i++) {\n\t\t\t\tif (movingAverage[i].length > 0) {\n\t\t\t\t\tmovingAverage[i].pop();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (uint256 i = 0; i < tokenInfo.length; i++) {\n\t\t\t(, int256 answer, , , ) = AggregatorV3Interface(\n\t\t\t\ttokenInfo[i]._aggregator\n\t\t\t).latestRoundData();\n\n\t\t\tmovingAverage[i].push(uint256(answer));\n\t\t\tuint256 sum = 0;\n\t\t\tif (movingAverage[i].length > sampleSize) {\n\t\t\t\tmovingAverage[i].pop();\n\t\t\t}\n\t\t\tfor (uint256 j = 0; j < movingAverage[i].length; j++) {\n\t\t\t\tsum += movingAverage[i][j];\n\t\t\t}\n\t\t}\n\t\tlastSampleTime = block.timestamp;\n\t\t// if there is enough bribe pay it to the caller\n\t\tif (bribeUnit > 0) {\n\t\t\tpayable(msg.sender).transfer(bribeUnit);\n\t\t}\n\t}\n\n    function _execute(\n        string calldata sourceChain_,\n        string calldata sourceAddress_,\n        bytes calldata payload_\n    ) internal override {\n        (IndexUpdateMessage memory message) = abi.decode(payload_, (IndexUpdateMessage));\n        for (uint256 i = 0; i < message.liquidityMessages.length; i++) {\n            LiquidityMessage memory liquidityMessage = message.liquidityMessages[i];\n            liquidityMessages.push(liquidityMessage);\n        }\n        for (uint256 i = 0; i < message.supplyMessages.length; i++) {\n            SupplyMessage memory supplyMessage = message.supplyMessages[i];\n            supplyMessages.push(supplyMessage);\n        }\n    }\n\n}"
    },
    "contracts/MockAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\ncontract MockAggregator is AggregatorV3Interface {\n    int256 private price;\n    // array of batch prices to fetch / pop and if empty return price\n    int256[] private prices;\n    uint8 private dec;\n\n    constructor(int256 _price, uint8 _decimals) {\n        price = _price;\n        dec = _decimals;\n    }\n\n    function setPrice(int256 _price) external {\n        price = _price;\n    }\n\n    function setPrices(int256[] memory _prices) external {\n        prices = _prices;\n    }\n\n    function decimals() public view override returns (uint8) {\n        return dec;\n    }\n\n    function description() external pure override returns (string memory) {\n        return \"Mock Aggregator\";\n    }\n\n    function version() external pure override returns (uint256) {\n        return 0;\n    }\n\n    function getRoundData(\n        uint80 _roundId\n    )\n        external\n        pure\n        override\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        return (_roundId, 0, 0, 0, 0);\n    }\n\n\n   function latestRoundedData()\n        external\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        // if prices is empty return price otherwise pop price\n        if (prices.length > 0) {\n            price = prices[prices.length - 1];\n            prices.pop();\n        }\n        return (0, price, 0, 0, 0);\n    }\n    \n\n    function latestRoundData()\n        external\n        view\n        override\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        // if prices is empty return price otherwise pop price\n        return (0, price, 0, 0, 0);\n    }\n}\n"
    },
    "contracts/MockAxelarGateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IAxelarGateway} from \"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol\";\n\ncontract MockAxelarGateway is IAxelarGateway {\n\tfunction contractId() external pure override returns (bytes32) {}\n\n\tfunction setup(bytes calldata data) external override {}\n\n\tfunction governance() external view override returns (address) {}\n\n\tfunction mintLimiter() external view override returns (address) {}\n\n\tfunction transferGovernance(address newGovernance) external override {}\n\n\tfunction transferMintLimiter(address newGovernance) external override {}\n\n\tfunction sendToken(\n\t\tstring calldata destinationChain,\n\t\tstring calldata destinationAddress,\n\t\tstring calldata symbol,\n\t\tuint256 amount\n\t) external override {}\n\n\tfunction callContract(\n\t\tstring calldata destinationChain,\n\t\tstring calldata contractAddress,\n\t\tbytes calldata payload\n\t) external override {}\n\n\tfunction callContractWithToken(\n\t\tstring calldata destinationChain,\n\t\tstring calldata contractAddress,\n\t\tbytes calldata payload,\n\t\tstring calldata symbol,\n\t\tuint256 amount\n\t) external override {}\n\n\tfunction isContractCallApproved(\n\t\tbytes32 commandId,\n\t\tstring calldata sourceChain,\n\t\tstring calldata sourceAddress,\n\t\taddress contractAddress,\n\t\tbytes32 payloadHash\n\t) external view override returns (bool) {}\n\n\tfunction isContractCallAndMintApproved(\n\t\tbytes32 commandId,\n\t\tstring calldata sourceChain,\n\t\tstring calldata sourceAddress,\n\t\taddress contractAddress,\n\t\tbytes32 payloadHash,\n\t\tstring calldata symbol,\n\t\tuint256 amount\n\t) external view override returns (bool) {}\n\n\tfunction validateContractCall(\n\t\tbytes32 commandId,\n\t\tstring calldata sourceChain,\n\t\tstring calldata sourceAddress,\n\t\tbytes32 payloadHash\n\t) external override returns (bool) {}\n\n\tfunction validateContractCallAndMint(\n\t\tbytes32 commandId,\n\t\tstring calldata sourceChain,\n\t\tstring calldata sourceAddress,\n\t\tbytes32 payloadHash,\n\t\tstring calldata symbol,\n\t\tuint256 amount\n\t) external override returns (bool) {}\n\n\tfunction authModule() external view override returns (address) {}\n\n\tfunction tokenDeployer() external view override returns (address) {}\n\n\tfunction tokenMintLimit(\n\t\tstring memory symbol\n\t) external view override returns (uint256) {}\n\n\tfunction tokenMintAmount(\n\t\tstring memory symbol\n\t) external view override returns (uint256) {}\n\n\tfunction allTokensFrozen() external view override returns (bool) {}\n\n\tfunction implementation() external view override returns (address) {}\n\n\tfunction tokenAddresses(\n\t\tstring memory symbol\n\t) external view override returns (address) {}\n\n\tfunction tokenFrozen(\n\t\tstring memory symbol\n\t) external view override returns (bool) {}\n\n\tfunction isCommandExecuted(\n\t\tbytes32 commandId\n\t) external view override returns (bool) {}\n\n\tfunction setTokenMintLimits(\n\t\tstring[] calldata symbols,\n\t\tuint256[] calldata limits\n\t) external override {}\n\n\tfunction upgrade(\n\t\taddress newImplementation,\n\t\tbytes32 newImplementationCodeHash,\n\t\tbytes calldata setupParams\n\t) external override {}\n\n\tfunction execute(bytes calldata input) external override {\n        // execute the bytes input\n\t\t\n\n    }\n}"
    },
    "contracts/MockUSDC.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"./SimpleERC20.sol\";\n\ncontract MockUSDC is SimpleERC20 {\n    constructor() SimpleERC20(\"USDC\", \"USDC\", 100000000000000000000000000) {}\n}"
    },
    "contracts/SimpleERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\n\ninterface ISimpleERC20 is IERC20 {\n    function mint(address to, uint256 amount) external;\n    function burn(address sender, uint256 amount) external;\n}\n\ncontract SimpleERC20 is ISimpleERC20, ERC20 {\n    address public owner = msg.sender;\n\n\tconstructor(\n\t\tstring memory name,\n\t\tstring memory symbol,\n\t\tuint256 initialSupply\n\t) ERC20(name, symbol) {\n\t\t_mint(msg.sender, initialSupply);\n\t}\n\n    function setOwner(address _owner) public {\n        require(msg.sender == owner, \"SimpleERC20: only owner can change owner\");\n        owner = _owner;\n    }\n\n    function mint(address to, uint256 amount) public override {\n        require(msg.sender == owner, \"SimpleERC20: only owner can mint\");\n        _mint(to, amount);\n    }\n\n    function burn(address sender, uint256 amount) public override {\n        _burn(sender, amount);\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}