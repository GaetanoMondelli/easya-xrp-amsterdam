{
  "language": "Solidity",
  "sources": {
    "@axelar-network/axelar-gmp-sdk-solidity/contracts/executable/AxelarExecutable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IAxelarGateway } from '../interfaces/IAxelarGateway.sol';\nimport { IAxelarExecutable } from '../interfaces/IAxelarExecutable.sol';\n\ncontract AxelarExecutable is IAxelarExecutable {\n    IAxelarGateway public immutable gateway;\n\n    constructor(address gateway_) {\n        if (gateway_ == address(0)) revert InvalidAddress();\n\n        gateway = IAxelarGateway(gateway_);\n    }\n\n    function execute(\n        bytes32 commandId,\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        bytes calldata payload\n    ) external {\n        bytes32 payloadHash = keccak256(payload);\n\n        if (!gateway.validateContractCall(commandId, sourceChain, sourceAddress, payloadHash))\n            revert NotApprovedByGateway();\n\n        _execute(sourceChain, sourceAddress, payload);\n    }\n\n    function executeWithToken(\n        bytes32 commandId,\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        bytes calldata payload,\n        string calldata tokenSymbol,\n        uint256 amount\n    ) external {\n        bytes32 payloadHash = keccak256(payload);\n\n        if (\n            !gateway.validateContractCallAndMint(\n                commandId,\n                sourceChain,\n                sourceAddress,\n                payloadHash,\n                tokenSymbol,\n                amount\n            )\n        ) revert NotApprovedByGateway();\n\n        _executeWithToken(sourceChain, sourceAddress, payload, tokenSymbol, amount);\n    }\n\n    function _execute(\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        bytes calldata payload\n    ) internal virtual {}\n\n    function _executeWithToken(\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        bytes calldata payload,\n        string calldata tokenSymbol,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarExecutable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IAxelarGateway } from './IAxelarGateway.sol';\n\ninterface IAxelarExecutable {\n    error InvalidAddress();\n    error NotApprovedByGateway();\n\n    function gateway() external view returns (IAxelarGateway);\n\n    function execute(\n        bytes32 commandId,\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        bytes calldata payload\n    ) external;\n\n    function executeWithToken(\n        bytes32 commandId,\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        bytes calldata payload,\n        string calldata tokenSymbol,\n        uint256 amount\n    ) external;\n}\n"
    },
    "@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IGovernable } from './IGovernable.sol';\nimport { IImplementation } from './IImplementation.sol';\n\ninterface IAxelarGateway is IImplementation, IGovernable {\n    /**********\\\n    |* Errors *|\n    \\**********/\n\n    error NotSelf();\n    error InvalidCodeHash();\n    error SetupFailed();\n    error InvalidAuthModule();\n    error InvalidTokenDeployer();\n    error InvalidAmount();\n    error InvalidChainId();\n    error InvalidCommands();\n    error TokenDoesNotExist(string symbol);\n    error TokenAlreadyExists(string symbol);\n    error TokenDeployFailed(string symbol);\n    error TokenContractDoesNotExist(address token);\n    error BurnFailed(string symbol);\n    error MintFailed(string symbol);\n    error InvalidSetMintLimitsParams();\n    error ExceedMintLimit(string symbol);\n\n    /**********\\\n    |* Events *|\n    \\**********/\n\n    event TokenSent(\n        address indexed sender,\n        string destinationChain,\n        string destinationAddress,\n        string symbol,\n        uint256 amount\n    );\n\n    event ContractCall(\n        address indexed sender,\n        string destinationChain,\n        string destinationContractAddress,\n        bytes32 indexed payloadHash,\n        bytes payload\n    );\n\n    event ContractCallWithToken(\n        address indexed sender,\n        string destinationChain,\n        string destinationContractAddress,\n        bytes32 indexed payloadHash,\n        bytes payload,\n        string symbol,\n        uint256 amount\n    );\n\n    event Executed(bytes32 indexed commandId);\n\n    event TokenDeployed(string symbol, address tokenAddresses);\n\n    event ContractCallApproved(\n        bytes32 indexed commandId,\n        string sourceChain,\n        string sourceAddress,\n        address indexed contractAddress,\n        bytes32 indexed payloadHash,\n        bytes32 sourceTxHash,\n        uint256 sourceEventIndex\n    );\n\n    event ContractCallApprovedWithMint(\n        bytes32 indexed commandId,\n        string sourceChain,\n        string sourceAddress,\n        address indexed contractAddress,\n        bytes32 indexed payloadHash,\n        string symbol,\n        uint256 amount,\n        bytes32 sourceTxHash,\n        uint256 sourceEventIndex\n    );\n\n    event ContractCallExecuted(bytes32 indexed commandId);\n\n    event TokenMintLimitUpdated(string symbol, uint256 limit);\n\n    event OperatorshipTransferred(bytes newOperatorsData);\n\n    event Upgraded(address indexed implementation);\n\n    /********************\\\n    |* Public Functions *|\n    \\********************/\n\n    function sendToken(\n        string calldata destinationChain,\n        string calldata destinationAddress,\n        string calldata symbol,\n        uint256 amount\n    ) external;\n\n    function callContract(\n        string calldata destinationChain,\n        string calldata contractAddress,\n        bytes calldata payload\n    ) external;\n\n    function callContractWithToken(\n        string calldata destinationChain,\n        string calldata contractAddress,\n        bytes calldata payload,\n        string calldata symbol,\n        uint256 amount\n    ) external;\n\n    function isContractCallApproved(\n        bytes32 commandId,\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        address contractAddress,\n        bytes32 payloadHash\n    ) external view returns (bool);\n\n    function isContractCallAndMintApproved(\n        bytes32 commandId,\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        address contractAddress,\n        bytes32 payloadHash,\n        string calldata symbol,\n        uint256 amount\n    ) external view returns (bool);\n\n    function validateContractCall(\n        bytes32 commandId,\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        bytes32 payloadHash\n    ) external returns (bool);\n\n    function validateContractCallAndMint(\n        bytes32 commandId,\n        string calldata sourceChain,\n        string calldata sourceAddress,\n        bytes32 payloadHash,\n        string calldata symbol,\n        uint256 amount\n    ) external returns (bool);\n\n    /***********\\\n    |* Getters *|\n    \\***********/\n\n    function authModule() external view returns (address);\n\n    function tokenDeployer() external view returns (address);\n\n    function tokenMintLimit(string memory symbol) external view returns (uint256);\n\n    function tokenMintAmount(string memory symbol) external view returns (uint256);\n\n    function allTokensFrozen() external view returns (bool);\n\n    function implementation() external view returns (address);\n\n    function tokenAddresses(string memory symbol) external view returns (address);\n\n    function tokenFrozen(string memory symbol) external view returns (bool);\n\n    function isCommandExecuted(bytes32 commandId) external view returns (bool);\n\n    /************************\\\n    |* Governance Functions *|\n    \\************************/\n\n    function setTokenMintLimits(string[] calldata symbols, uint256[] calldata limits) external;\n\n    function upgrade(\n        address newImplementation,\n        bytes32 newImplementationCodeHash,\n        bytes calldata setupParams\n    ) external;\n\n    /**********************\\\n    |* External Functions *|\n    \\**********************/\n\n    function execute(bytes calldata input) external;\n}\n"
    },
    "@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IContractIdentifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// General interface for upgradable contracts\ninterface IContractIdentifier {\n    /**\n     * @notice Returns the contract ID. It can be used as a check during upgrades.\n     * @dev Meant to be overridden in derived contracts.\n     * @return bytes32 The contract ID\n     */\n    function contractId() external pure returns (bytes32);\n}\n"
    },
    "@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IGovernable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title IGovernable Interface\n * @notice This is an interface used by the AxelarGateway contract to manage governance and mint limiter roles.\n */\ninterface IGovernable {\n    error NotGovernance();\n    error NotMintLimiter();\n    error InvalidGovernance();\n    error InvalidMintLimiter();\n\n    event GovernanceTransferred(address indexed previousGovernance, address indexed newGovernance);\n    event MintLimiterTransferred(address indexed previousGovernance, address indexed newGovernance);\n\n    /**\n     * @notice Returns the governance address.\n     * @return address of the governance\n     */\n    function governance() external view returns (address);\n\n    /**\n     * @notice Returns the mint limiter address.\n     * @return address of the mint limiter\n     */\n    function mintLimiter() external view returns (address);\n\n    /**\n     * @notice Transfer the governance role to another address.\n     * @param newGovernance The new governance address\n     */\n    function transferGovernance(address newGovernance) external;\n\n    /**\n     * @notice Transfer the mint limiter role to another address.\n     * @param newGovernance The new mint limiter address\n     */\n    function transferMintLimiter(address newGovernance) external;\n}\n"
    },
    "@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IImplementation.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IContractIdentifier } from './IContractIdentifier.sol';\n\ninterface IImplementation is IContractIdentifier {\n    error NotProxy();\n\n    function setup(bytes calldata data) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/ILiquidityManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ILiquidityManager {\n    function getTotalLiquidityForToken(address token) external view returns (uint128 totalLiquidity);\n}"
    },
    "contracts/IndexAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {ILiquidityManager} from \"./ILiquidityManager.sol\";\nimport {IAxelarGateway} from \"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol\";\nimport { AxelarExecutable } from \"@axelar-network/axelar-gmp-sdk-solidity/contracts/executable/AxelarExecutable.sol\";\n\n\nuint32 constant CALLBACK_GAS_LIMIT = 4_000_000;\n\nstruct TokenInfo {\n    string _symbol;\n    address _address;\n    uint32 _chainId;\n    address _aggregator;\n    string[] _tags;\n}\n\nstruct LiquidityMessage {\n    address token;\n    string tokenDemonination;\n    uint256 liquidity;\n    uint32 chainId;\n    uint256 timestamp;\n} \n\nstruct SupplyMessage {\n    address token;\n    uint256 supply;\n    uint32 chainId;\n    uint256 timestamp;\n}\n\nstruct AggregatorParams {\n    uint256 _timeWindow; \n    uint256 _sampleSize;\n    // uint32 _chainId;\n    uint256 _bribeUnit;\n}\n\nstruct IndexUpdateMessage {\n    LiquidityMessage[] liquidityMessages;\n    SupplyMessage[] supplyMessages;\n}\n\nenum PayFeesIn {\n    Native,\n    LINK\n}\n\nerror NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees);\n\n\ncontract IndexAggregator is AxelarExecutable {\n\tIAxelarGateway axelarGateway;\n\tTokenInfo[] public tokenInfo;\n\tTokenInfo[] tmpTokens;\n\tILiquidityManager public liquidityManager;\n\tmapping(string => uint256) public tokens;\n\tstring[] public tokenSymbols;\n\n\tSupplyMessage[] public supplyMessages;\n\tLiquidityMessage[] public liquidityMessages;\n\t// TaggingVerifier public taggingVerifier;\n\n\tuint256[] public totalSupplies;\n\tuint256[] public liquidities;\n\tuint256[] public tokenParamsTimestampUpdates;\n\n\tmapping(uint256 => uint256[]) public movingAverage;\n\tuint256 sampleSize;\n\tuint256 timeWindow;\n\tuint256 samplingFrequency;\n\tuint256 lastSampleTime;\n\tuint256[] public lastIndexOrder;\n\tmapping(string => uint256[]) public tagsIndexOrder;\n\tmapping(string => uint256) public tagsIndexTimestamp;\n\tuint256 public lastIndexTimestamp;\n\tuint256 public bribeUnit;\n\tuint32 public chainId;\n\tuint32 public mainChainId;\n    address mainChainAddress;\n\tuint256 sequenceId = 0;\n\n\n\tmapping(uint64 => address) public chainSelectorIdToSidechainAddress;\n    mapping(uint64 => string) public chainSelectorIdToDestinationChain;\n\n\tconstructor(\n\t\tTokenInfo[] memory _tokenInfo,\n\t\taddress _liquidityManager,\n\t\taddress _axelarGateway,\n\t\tAggregatorParams memory _aggregatorParams\n\t) \n    AxelarExecutable(_axelarGateway)\n    {\n\t\tsampleSize = _aggregatorParams._sampleSize;\n\t\ttimeWindow = _aggregatorParams._timeWindow;\n\t\tsamplingFrequency = timeWindow / sampleSize;\n\t\tbribeUnit = _aggregatorParams._bribeUnit;\n\t\taxelarGateway = IAxelarGateway(_axelarGateway);\n\t\tliquidityManager = ILiquidityManager(_liquidityManager);\n\t\tfor (uint256 i = 0; i < _tokenInfo.length; i++) {\n\t\t\ttokenInfo.push(_tokenInfo[i]);\n\t\t\ttokenSymbols.push(_tokenInfo[i]._symbol);\n\t\t\ttokens[_tokenInfo[i]._symbol] = i;\n\t\t\ttotalSupplies.push(IERC20(_tokenInfo[i]._address).totalSupply());\n\t\t}\n\t}\n\n\t// Initialize methods\n\n\t// function setTaggingVerifier(address _taggingVerifier) external {\n\t//     taggingVerifier = TaggingVerifier(_taggingVerifier);\n\t// }\n\n\tfunction setChainId(uint32 _chainId, uint32 _mainChainId, address _mainChainAddress) external {\n\t\tchainId = _chainId;\n\t\tmainChainId = _mainChainId;\n        mainChainAddress = _mainChainAddress;\n\t}\n\n    function setDestinationChain(uint64 chainSelectorId, string calldata destinationChain) external {\n        chainSelectorIdToDestinationChain[chainSelectorId] = destinationChain;\n    }\n\n\tfunction isMainChain() public view returns (bool) {\n\t\treturn chainId == mainChainId;\n\t}\n\n\tfunction setSideChainAddress(\n\t\tuint64 chainSelectorId,\n\t\taddress sideChainAddress\n\t) external {\n\t\tchainSelectorIdToSidechainAddress[chainSelectorId] = sideChainAddress;\n\t}\n\n\tfunction updateTokenParams(\n\t\tuint256[] memory _totalSupplies,\n\t\tuint256[] memory _liquidities\n\t) external {\n\t\tfor (uint256 i = 0; i < tokenInfo.length; i++) {\n\t\t\tif (tokenInfo[i]._chainId == chainId) {\n\t\t\t\tliquidities[i] = liquidityManager.getTotalLiquidityForToken(\n\t\t\t\t\ttokenInfo[i]._address\n\t\t\t\t);\n\t\t\t\ttotalSupplies[i] = IERC20(tokenInfo[i]._address).totalSupply();\n\t\t\t\ttokenParamsTimestampUpdates[i] = block.timestamp;\n\t\t\t}\n\t\t}\n\n\t\tif (isMainChain()) {\n\t\t\tfor (uint256 i = 0; i < totalSupplies.length; i++) {\n\t\t\t\tfor (uint256 j = 0; j < tokenInfo.length; j++) {\n\t\t\t\t\tif (tokenInfo[j]._address == supplyMessages[i].token) {\n\t\t\t\t\t\ttotalSupplies[j] = supplyMessages[i].supply;\n\t\t\t\t\t\ttokenParamsTimestampUpdates[j] = supplyMessages[i]\n\t\t\t\t\t\t\t.timestamp;\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (uint256 i = 0; i < liquidities.length; i++) {\n\t\t\t\tfor (uint256 j = 0; j < tokenInfo.length; j++) {\n\t\t\t\t\tif (tokenInfo[j]._address == liquidityMessages[i].token) {\n\t\t\t\t\t\tliquidities[j] = liquidityMessages[i].liquidity;\n\t\t\t\t\t\ttokenParamsTimestampUpdates[j] = liquidityMessages[i]\n\t\t\t\t\t\t\t.timestamp;\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!isMainChain()) {\n\t\t\tSupplyMessage[] memory _supplyMessages = new SupplyMessage[](\n\t\t\t\ttokenInfo.length\n\t\t\t);\n\t\t\tLiquidityMessage[]\n\t\t\t\tmemory _liquidityMessages = new LiquidityMessage[](\n\t\t\t\t\ttokenInfo.length\n\t\t\t\t);\n\t\t\tfor (uint256 i = 0; i < tokenInfo.length; i++) {\n\t\t\t\tif (chainId == tokenInfo[i]._chainId) {\n\t\t\t\t\t_supplyMessages[i] = SupplyMessage(\n\t\t\t\t\t\ttokenInfo[i]._address,\n\t\t\t\t\t\t_totalSupplies[i],\n\t\t\t\t\t\tchainId,\n\t\t\t\t\t\tblock.timestamp\n\t\t\t\t\t);\n\t\t\t\t\t_liquidityMessages[i] = LiquidityMessage(\n\t\t\t\t\t\ttokenInfo[i]._address,\n                        tokenInfo[i]._symbol,\n\t\t\t\t\t\t_liquidities[i],\n\t\t\t\t\t\tchainId,\n\t\t\t\t\t\tblock.timestamp\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n        \n        // execute to main chain using Axelar\n        bytes memory payload = abi.encode(\n            IndexUpdateMessage({\n                supplyMessages: _supplyMessages,\n                liquidityMessages: _liquidityMessages\n            })\n        );\n        // execute(chainId, mainChainId, payload);\n        IAxelarGateway(axelarGateway).callContract(\n            chainSelectorIdToDestinationChain[chainId],\n            toAsciiString(mainChainAddress),\n            payload\n        );\n      }\n\t}\n\n    function toAsciiString(address x) internal pure returns (string memory) {\n    bytes memory s = new bytes(40);\n    for (uint i = 0; i < 20; i++) {\n        bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\n        bytes1 hi = bytes1(uint8(b) / 16);\n        bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\n        s[2*i] = char(hi);\n        s[2*i+1] = char(lo);            \n    }\n    return string(s);\n    }\n\n    function char(bytes1 b) internal pure returns (bytes1 c) {\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\n        else return bytes1(uint8(b) + 0x57);\n    }\n\n\tfunction checkTokenParams() public {\n\t\tfor (uint256 i = 0; i < tokenInfo.length; i++) {\n\t\t\tif (\n\t\t\t\tblock.timestamp - tokenParamsTimestampUpdates[i] >= timeWindow\n\t\t\t) {\n\t\t\t\tliquidities[i] = liquidityManager.getTotalLiquidityForToken(\n\t\t\t\t\ttokenInfo[i]._address\n\t\t\t\t);\n\t\t\t\ttotalSupplies[i] = IERC20(tokenInfo[i]._address).totalSupply();\n\t\t\t\ttokenParamsTimestampUpdates[i] = block.timestamp;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction receiveFromAxelar(\n\t\tIndexUpdateMessage memory indexMessage\n\t) external {\n\t\t// add @axelar-network/axelar-cgp-solidity logic here\n\n\t\tfor (uint256 i = 0; i < indexMessage.liquidityMessages.length; i++) {\n\t\t\tLiquidityMessage memory liquidityMessage = indexMessage\n\t\t\t\t.liquidityMessages[i];\n\t\t\tliquidityMessages.push(liquidityMessage);\n\t\t}\n\t\tfor (uint256 i = 0; i < indexMessage.supplyMessages.length; i++) {\n\t\t\tSupplyMessage memory supplyMessage = indexMessage.supplyMessages[i];\n\t\t\tsupplyMessages.push(supplyMessage);\n\t\t}\n\t}\n\n\tfunction getCollectPriceFeedsSeq() external returns (uint256) {\n\t\tsequenceId += 1;\n\t\treturn sequenceId;\n\t}\n\n\tfunction pullexecute(\n\t\tstring calldata sourceChain_,\n        string calldata sourceAddress_,\n        bytes calldata payload_\n\t) external\n\t{\n\t\treturn _execute(sourceChain_, sourceAddress_, payload_);\n\t}\n\n\tfunction collectPriceFeeds() external {\n\t\trequire(\n\t\t\tblock.timestamp - lastSampleTime >= samplingFrequency,\n\t\t\t\"IndexAggregator: Sampling frequency not reached\"\n\t\t);\n\n\t\tif (block.timestamp - lastSampleTime >= timeWindow) {\n\t\t\tfor (uint256 i = 0; i < tokenInfo.length; i++) {\n\t\t\t\tif (movingAverage[i].length > 0) {\n\t\t\t\t\tmovingAverage[i].pop();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (uint256 i = 0; i < tokenInfo.length; i++) {\n\t\t\t(, int256 answer, , , ) = AggregatorV3Interface(\n\t\t\t\ttokenInfo[i]._aggregator\n\t\t\t).latestRoundData();\n\n\t\t\tmovingAverage[i].push(uint256(answer));\n\t\t\tuint256 sum = 0;\n\t\t\tif (movingAverage[i].length > sampleSize) {\n\t\t\t\tmovingAverage[i].pop();\n\t\t\t}\n\t\t\tfor (uint256 j = 0; j < movingAverage[i].length; j++) {\n\t\t\t\tsum += movingAverage[i][j];\n\t\t\t}\n\t\t}\n\t\tlastSampleTime = block.timestamp;\n\t\t// if there is enough bribe pay it to the caller\n\t\tif (bribeUnit > 0) {\n\t\t\tpayable(msg.sender).transfer(bribeUnit);\n\t\t}\n\t}\n\n\t    function persistIndex(uint256[] memory indexOrders, string memory tag) public returns (bool)\n    {\n        // indexOrders is an array index order [2,0,1] means 2nd token, 0th token, 1st token for price calculation\n        uint256 token_a_value;\n        uint256 token_b_value;\n        for (uint256 i = 0; i < indexOrders.length - 1; i++) {\n            token_a_value =  0;\n            token_b_value = 0;\n\n            for (uint256 j = 0; j < movingAverage[indexOrders[i]].length; j++) {\n                token_a_value += movingAverage[indexOrders[i]][j] * totalSupplies[indexOrders[i]];\n                token_b_value += movingAverage[indexOrders[i + 1]][j] * totalSupplies[indexOrders[i + 1]];\n            }\n\n\n            // require(token_a_value > 0, \"IndexAggregator: Token value is zero\");\n            // require(token_b_value > 0, \"IndexAggregator: Token value is zero\");\n            // require(token_a_value > token_b_value, \"IndexAggregator: order is not correct\");\n        }\n\n        if(keccak256(abi.encodePacked(tag)) != keccak256(abi.encodePacked(\"\"))) {\n           tagsIndexOrder[tag] = indexOrders;\n        }\n        else{\n            lastIndexOrder = indexOrders;\n            lastIndexTimestamp = block.timestamp;  \n        }\n        return true;\n    }\n\n    function _execute(\n        string calldata sourceChain_,\n        string calldata sourceAddress_,\n        bytes calldata payload_\n    ) internal override {\n        (IndexUpdateMessage memory message) = abi.decode(payload_, (IndexUpdateMessage));\n        for (uint256 i = 0; i < message.liquidityMessages.length; i++) {\n            LiquidityMessage memory liquidityMessage = message.liquidityMessages[i];\n            liquidityMessages.push(liquidityMessage);\n        }\n        for (uint256 i = 0; i < message.supplyMessages.length; i++) {\n            SupplyMessage memory supplyMessage = message.supplyMessages[i];\n            supplyMessages.push(supplyMessage);\n        }\n    }\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}